pipeline {

    parameters {
        booleanParam(name: 'autoApprove', defaultValue: false, description: 'Automatically run apply after generating plan?')
        booleanParam(name: 'autoDELApprove', defaultValue: false, description: 'Automatically run destroy after generating plan?')

    }


     environment {
        AWS_ACCESS_KEY_ID     = credentials('AWS_ACCESS_KEY_ID')
        AWS_SECRET_ACCESS_KEY = credentials('AWS_SECRET_ACCESS_KEY')
    }

   agent  any
        options {
                timestamps ()
            }
    stages {
        stage('checkout') {
            steps {
                 script{
                        dir("terraform")
                        {
                            git "https://github.com/juergenschubert/DELLEMC-DPS-Jenkins.git"
                        }
                    }
                }
            }
    stage('terraform init') {
          sh """
             terraform init
          """
          //write the template output in a file
          def fileContent = sh(returnStdout: true, script: "terraform output neededForAnsible")
          writeFile file: "${WORKSPACE}/vars.yaml", text: fileContent
        }
    stage('terraform plan') {
          sh """
             terraform plan
             terraform apply --auto-approve
          """
          //write the template output in a file
          def fileContent = sh(returnStdout: true, script: "terraform output neededForAnsible")
          writeFile file: "${WORKSPACE}/vars.yaml", text: fileContent
        }
    stage('terraform apply') {
          sh """
             terraform apply --auto-approve
          """
          //write the template output in a file
          def fileContent = sh(returnStdout: true, script: "terraform output neededForAnsible")
          writeFile file: "${WORKSPACE}/vars.yaml", text: fileContent
        }
    stage('ansible') {
      sh """
          ansible-playbook release.yml -e @vars.yaml
       """
   }
 }
